/*Given two sorted arrays arr[] and brr[] of size N and M respectively. The task is to find the union of these two arrays.
Union of two arrays can be defined as the common and distinct elements in the two arrays.

Example 1:

Input: 
N = 5, arr1[] = {1, 2, 3, 4, 5}  
M = 3, arr2 [] = {1, 2, 3}
Output: 1 2 3 4 5
Explanation: Distinct elements including 
both the arrays are: 1 2 3 4 5.
Example 2:

Input: 
N = 5, arr1[] = {2, 2, 3, 4, 5}  
M = 5, arr2[] = {1, 1, 2, 3, 4}
Output: 1 2 3 4 5
Explanation: Distinct elements including 
both the arrays are: 1 2 3 4 5.
Example 3:

Input:
N = 5, arr1[] = {1, 1, 1, 1, 1}
M = 5, arr2[] = {2, 2, 2, 2, 2}
Output: 1 2
Explanation: Distinct elements including 
both the arrays are: 1 2.

Your Task: This is a function problem. You only need to complete the function findUnion() that takes two arrays arr1[], arr2[], and their size N and M as parameters and returns the union of two arrays. The new line is automatically appended by the driver code.

Expected Time Complexity: O(N+M).
Expected Auxiliary Space: O(N+M).

Constraints:
1 <= N, M <= 105
1 <= arr[i], brr[i] <= 106

/*

vector<int> findUnion(int a[], int b[], int n, int m)
{
    vector<int>result;
    int i=0,j=0;
    while(i<n && j<m){
        if(a[i]<b[j]){
            result.push_back(a[i]);
            i++;
        }
        else if(b[j]<a[i]){
            result.push_back(b[j]);
            j++;
        }
        else{
            result.push_back(b[j]);
            j++;
            i++;
        }
    }
    while(i<n){
        result.push_back(a[i]);
        i++;
    }
    while(j<m){
        result.push_back(b[j]);
        j++;
    }
    return result;
}
